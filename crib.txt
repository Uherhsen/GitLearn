BASH crib  - шпора по командной строке и гит хабу

глобалныке настройки:
git config --global user.name "Имя"
git config --global user.email "мыло@намыле.ru"
локальные настройки (без флага --global) делаются для проэкта в его директории, посмотреть можно в файле config в папке .git:
git config user.name "Имя"
git config user.email "мыло@намыле.ru"

индексация:
git add -A все файлы
git add * все файлы
git add . все файлы для коммита, но только в текущей директории

коммит:
git commit включает интерактивный режим, пишем комент в кавычках,
 что бы выйти вводим :wq

git commit -m"коментарий-komment"

отображение статуса:
git status

вызов редактора:
gitk - дефолтный редактор историй коммитов

______________________________________________________
см. историю:
git log
ctr+z - выйти

флаги для git log
--pretty=oneline - в одну строку
--max-count=3 - вывести последние три
--author= "Имя юзера" (Test local User)
--date=short
пример форматирования:
git log --pretty=format:"%h - %s : %ad [%an]" --date=short
git log --pretty=oneline --max-count=7
______________________________________________________
ЧЕКАУТ (перемещение по комитам и веткам):
git checkout хеш(копируется из лога) или имя файла

git checkout master - возврат к мастер ветке
______________________________________________________

откат индексации файла
git reset HEAD имя файла (вместо HEAD может быть хеш коммита)
------------------------------------------------------
удаление коммита 

- удаление последнего коммита:
git revert HEAD (переход в режим редактора, не пользуемся)
флаг для удаления без режима редактора:
git revert HEAD --no-edit (вместо HEAD можно вставить хеш коммита)

 -КОНФЛИКТЫ и их РЕШЕНИЯ-
...при конфликте файлы отревертились, но образовался лишний файл и-за того что он был переименован несколько раз.
Гит не знал какой файл оставить.

git revert --abort (отмена конфликтого реверта)
...или привести файлы вручную в ном состояние проиндексировать и снова закомитить
______________________________________________________
ВЕТКИ !!!!

git branch показывает ветки в !локальном репозитории

git checkout -b newbranch (newbranch - название ветки,ветка для разработки обычно называется dev)
git checkout название ветки - переключение между ветками

СЛИЯНИЕ ВЕТОК
git merge название ветки (находясь на какой то ветке заливаем какую то другую ветку)
git merge abort отмена слияния
:wq записать и выйти из интеракт редактора

git rebase название ветки (не сохраняет историю, рекомендуется для работы со своим  репозиторием)
_______________________________________________________

     ___РАБОТА С УДАЛЕННЫМ РЕПОЗИТОРИЕМ___

-скопировать с удаленного  репо:
git clone ссылка из удаленного репозитория в конце можно добавить название папки куда скачается

-залить на удаленный репо:
создать одноименный проэкт на гитхабе
выполнить команды с сайта
ввести логин (или мыло), пароль в баше
------------
если другой пользователь (видимо не локальный) нужно его добавить:
settings(это настройки в конкретном репо) -> 
collaborators (устарело, Manage access) -> invite a collaborator->
указываем логин -> копируем предоставленную для подтверждения ссылку(copy invite link)->
->
------------
-залить изменения:
git push                      или
git push origin main (master), или другое название ветки

-чтобы не вводить каждый раз пароль и логин(ssh-keygen = публичный ключ):
вводим команду 
ssh-keygen 
-> enter -> enter ключи созданы они в папке C:\Users\windows\.ssh в файле id_rsa.pub 
копируем, заходим в настройки git hub
заходим в настройки аккаунта git hub - SSH and GPG keys, жмем new SSH key вставляем в окошко ключ и как то называем его 

переходим в проэкт который хотим PUSH ить и копируем ссылку только SSH, или
если проэкт уже скопирован В файле .git/config изменить url в секции [remote "origin"]
на ссылку с гит хаба на SSH.

git config -l (проверка используемого протокола)

--------------------------------------------------------- совет из интернета:
Я предпочитаю использовать HTTPS, я считаю, что это проще и безопаснее, чем настройка ключей ssh.

Используя HTTPS, вы можете запретить git запрашивать ваше имя пользователя для пультов Github с помощью следующего:

git config --global url."https://yourusername@github.com".insteadOf "https://github.com"
И вы можете, по крайней мере, уменьшить частоту, с которой git запрашивает ваш пароль:

git config --global credential.helper 'cache --timeout=28800'
Где 28800 - это 8 часов. Я использую эту настройку, чтобы ввести свой пароль только один раз, когда я начинаю свой рабочий день.

После этого вы будете иметь эти записи в вашем ~/.gitconfig

[url "https://yourusername@github.com"]
    insteadOf = https://github.com

[credential]
    helper = cache --timeout=28800
-----------------------------------------------------------
_______________________________________________________

!!! ПОДТЯГИВАНИЕ ИЗМЕНЕНИЙ ИЗ УДАЛЕННОГО РЕПО !!!

git pull

git pull origin название ветки

           ________________________________________
            _____команды для командной строки:____

mkdir - создать директорию
cd - перейти в директорию
cd/d x:/ перейти на другой диск

ls показать файлы в директории

copy con text.txt- создать файл, потом пишешь текст, потом жмёш F6 и enter,  

type text.txt - просмотреть файл


https://www.youtube.com/watch?v=en6gms6e54Q&list=PLIU76b8Cjem5B3sufBJ_KFTpKkMEvaTQR&index=1